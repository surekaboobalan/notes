waits :


	Static 	-----> Thread.sleep(); --> Java

	Dynamic  

		implicit

		explicit

		fluent

		pageLoadTimeout

		
Implicit Wait :

	it is applicable for all elements but we use findElement() and findElements()

	if driver will find out the Element within given secs

					it will ignore rest of the seconds

	if driver doesn't find out the Element within given secs

					it will throw NoSuchElementException at run-time



Syntax 1 :

Selenium 3 :

	driver.manage().timeouts().implicitlyWait(10,TimeUnit.Seconds);


Syntax 2 :

Selenium 4 :

	driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

	driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));




Explicit Wait :

		it is applicable for single webelements 

		and depends on Condition and Duration


if the condition is true within given duration 

				it will ignore rest of sec and working fine

if the condition is false 

		it will throw Exceptions depends on given condition

Syntax :

	( c ) 
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

wait.until(ExpectedConditions.alertIsPresent());


Fluent Wait :


Syntax: 



	Wait<WebDriver> w = new FluentWait<WebDriver>(driver).withTimeout(Duration.ofSeconds(30))
		.pollingEvery(Duration.ofSeconds(5)).ignoring(NoSuchElementException.class);







Page load timeout :

		Default loading time for get() is 300 ms
		
	Syntax:
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));

		pageloadtimeout impact in get()

		if page is loaded within given sec ---> fine

		if page is not loaded within given sec ---> throw TimeOutException at Run-Time.




